print(first)
class(first)
for(row in 1:nrow(pred_clean)){
if (pred_clean$pred_scene[row] %in% mapA_green){
if(pred_clean$block[row] == "green"){
pred<-match(pred_clean$pred_scene[row],mapA_green) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapA_green)
second<-match(pred_clean$scene_b[row], mapA_green)#get index of second
pred_clean$distance_left[row]<-first #WHY ISN'T THIS WORKING
pred_clean$distance_right[row]<-abs(second-pred)
}
else{
pred<-match(pred_clean$pred_scene[row],mapA_blue) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapA_blue)
second<-match(pred_clean$scene_b[row], mapA_blue)#get index of second
pred_clean$distance_left[row]<-pred-first
pred_clean$distance_right[row]<-pred-second
}
if (pred_clean$pred_scene[row] %in% mapA_green){
if(pred_clean$block[row] == "green"){
pred<-match(pred_clean$pred_scene[row],mapB_green) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapB_green)
second<-match(pred_clean$scene_b[row], mapB_green)#get index of second
pred_clean$distance_left[row]<-abs(first-pred)
pred_clean$distance_right[row]<-abs(second-pred)
}
else{
pred<-match(pred_clean$pred_scene[row],mapB_blue) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapB_blue)
second<-match(pred_clean$scene_b[row], mapB_blue)#get index of second
pred_clean$distance_left[row]<-pred-first
pred_clean$distance_right[row]<-pred-second
}
}
}
}
for(row in 1:nrow(pred_clean)){
if (pred_clean$pred_scene[row] %in% mapA_green){
if(pred_clean$block[row] == "green"){
pred<-match(pred_clean$pred_scene[row],mapA_green) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapA_green)
second<-match(pred_clean$scene_b[row], mapA_green)#get index of second
print(pred)
pred_clean$distance_left[row]<-abs(first-pred) #WHY ISN'T THIS WORKING
pred_clean$distance_right[row]<-abs(second-pred)
}
else{
pred<-match(pred_clean$pred_scene[row],mapA_blue) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapA_blue)
second<-match(pred_clean$scene_b[row], mapA_blue)#get index of second
pred_clean$distance_left[row]<-pred-first
pred_clean$distance_right[row]<-pred-second
}
if (pred_clean$pred_scene[row] %in% mapA_green){
if(pred_clean$block[row] == "green"){
pred<-match(pred_clean$pred_scene[row],mapB_green) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapB_green)
second<-match(pred_clean$scene_b[row], mapB_green)#get index of second
pred_clean$distance_left[row]<-abs(first-pred)
pred_clean$distance_right[row]<-abs(second-pred)
}
else{
pred<-match(pred_clean$pred_scene[row],mapB_blue) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapB_blue)
second<-match(pred_clean$scene_b[row], mapB_blue)#get index of second
pred_clean$distance_left[row]<-pred-first
pred_clean$distance_right[row]<-pred-second
}
}
}
}
for(row in 1:nrow(pred_clean)){
if (pred_clean$pred_scene[row] %in% mapA_green){
if(pred_clean$block[row] == "green"){
pred<-match(pred_clean$pred_scene[row],mapA_green) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapA_green)
second<-match(pred_clean$scene_b[row], mapA_green)#get index of second
print(pred_clean$distance_left[row])
pred_clean$distance_left[row]<-abs(first-pred) #WHY ISN'T THIS WORKING
pred_clean$distance_right[row]<-abs(second-pred)
}
else{
pred<-match(pred_clean$pred_scene[row],mapA_blue) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapA_blue)
second<-match(pred_clean$scene_b[row], mapA_blue)#get index of second
pred_clean$distance_left[row]<-pred-first
pred_clean$distance_right[row]<-pred-second
}
if (pred_clean$pred_scene[row] %in% mapA_green){
if(pred_clean$block[row] == "green"){
pred<-match(pred_clean$pred_scene[row],mapB_green) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapB_green)
second<-match(pred_clean$scene_b[row], mapB_green)#get index of second
pred_clean$distance_left[row]<-abs(first-pred)
pred_clean$distance_right[row]<-abs(second-pred)
}
else{
pred<-match(pred_clean$pred_scene[row],mapB_blue) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapB_blue)
second<-match(pred_clean$scene_b[row], mapB_blue)#get index of second
pred_clean$distance_left[row]<-pred-first
pred_clean$distance_right[row]<-pred-second
}
}
}
}
for(row in 1:nrow(pred_clean)){
for(row in 1:nrow(pred_clean)){
if (pred_clean$pred_scene[row] %in% mapA_green){
if(pred_clean$block[row] == "green"){
pred<-match(pred_clean$pred_scene[row],mapA_green) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapA_green)
second<-match(pred_clean$scene_b[row], mapA_green)#get index of second
print(pred_clean$distance_left[row])
pred_clean$distance_left[row]<-abs(first-pred) #WHY ISN'T THIS WORKING
pred_clean$distance_right[row]<-abs(second-pred)
print(pred_clean$distance_left[row])
}
else{
pred<-match(pred_clean$pred_scene[row],mapA_blue) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapA_blue)
second<-match(pred_clean$scene_b[row], mapA_blue)#get index of second
pred_clean$distance_left[row]<-pred-first
pred_clean$distance_right[row]<-pred-second
}
if (pred_clean$pred_scene[row] %in% mapA_green){
if(pred_clean$block[row] == "green"){
pred<-match(pred_clean$pred_scene[row],mapB_green) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapB_green)
second<-match(pred_clean$scene_b[row], mapB_green)#get index of second
pred_clean$distance_left[row]<-abs(first-pred)
pred_clean$distance_right[row]<-abs(second-pred)
}
else{
pred<-match(pred_clean$pred_scene[row],mapB_blue) #get index of pred scene
first<-match(pred_clean$scene_a[row], mapB_blue)
second<-match(pred_clean$scene_b[row], mapB_blue)#get index of second
pred_clean$distance_left[row]<-pred-first
pred_clean$distance_right[row]<-pred-second
}
}
}
}
rsconnect::setAccountInfo(name='hannah-tarder-stoll', token='57F543F5F2BBA0F98157D94E6FD39179', secret='7YCdwkhnSIWPOU6Rut20/dWo6OLAJcY72QLctA/l')
library(car)
library(tidyverse)
library(ggplot2)
prestige_data<-Prestige
View(prestige_data)
prestige_data<-subset(prestige_data, type != "prof")
prestige_data$type_dummy <- dplyr::recode(prestige_data$type,
"bc" = 0,
"wc" = 1)
prestige_data$type_effect <- dplyr::recode(prestige_data$type,
"bc" = -.5,
"wc" = .5)
prestige_data$prestige_center <- scale(prestige_data$prestige,
center = T, scale = F)
m1<-lm(income ~ prestige_center + type_effect, data = prestige_data)
summary(m1)
avPlots(m1)
m2<-lm(income~prestige_center + type_effect + prestige_center*type_effect, data = prestige_data)
summary(m2)
m2<-lm(income~prestige_center + type_effect + prestige_center*type_dummy, data = prestige_data)
summary(m2)
m2<-lm(income~prestige_center + type_dummy + prestige_center*type_dummy, data = prestige_data)
summary(m2)
prestige_data$int <- 1
xmatrix <- cbind(prestige_data$int, prestige_data$type_effect, prestige_data$prestige_center)
colnames(xmatrix) <- c("intercept", "type_effect", "prestige_center")
head(xmatrix)
#y matrix
ymatrix <- as.matrix(prestige_data$income)
colnames(ymatrix) <- c("income")
head(ymatrix)
#transpose x
nrow(xmatrix)
xmatrix.t <- t(xmatrix)
xmatrix.t[,1:4]
ncol(xmatrix.t)
#multiply x by transpose x
xmatrix.tx <- (xmatrix.t%*%xmatrix)
xmatrix.tx
#multiply transpose x by y
xtransy <- (xmatrix.t%*%ymatrix)
xtransy
#take the inverse of x by transpose x
xmatrix.txs <- solve(xmatrix.tx)
xmatrix.txs
#get b
b <- xmatrix.txs %*% xtransy
b
b %>% round(4) %>% kable()
librbary(kable)
library(kable)
library(kableExtra)
install.packages('kableExtra')
library(kableExtra)
b %>% round(4) %>% kable()
m1
#x matrix
prestige_data$int <- 1
xmatrix <- cbind(prestige_data$int, prestige_data$type_effect, prestige_data$prestige_center)
colnames(xmatrix) <- c("intercept", "type_effect", "prestige_center")
head(xmatrix)
#y matrix
ymatrix <- as.matrix(prestige_data$income)
colnames(ymatrix) <- c("income")
head(ymatrix)
#transpose x
nrow(xmatrix)
xmatrix.t <- t(xmatrix)
xmatrix.t[,1:4]
ncol(xmatrix.t)
#multiply x by transpose x
xmatrix.tx <- (xmatrix.t%*%xmatrix)
xmatrix.tx
#multiply transpose x by y
xtransy <- (xmatrix.t%*%ymatrix)
xtransy
#take the inverse of x by transpose x
xmatrix.txs <- solve(xmatrix.tx)
xmatrix.txs
#get b
b <- xmatrix.txs %*% xtransy
b
b %>% round(4) %>% kable()
summary(m1)
library(effects)
install.packages('effects')
library(effects)
install.packages('effects')
dfhigh <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 1)
dflow <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 0)
type_wc<- cbind(dfhigh,
predict(fit, dfhigh,
interval = "confidence"))
library(psych)
type_wc<- cbind(dfhigh,
predict(fit, dfhigh,
interval = "confidence"))
library(broom)
type_wc<- cbind(dfhigh,
predict(fit, dfhigh,
interval = "confidence"))
type_wc<- cbind(dfhigh,
predict(m2, dfhigh,
interval = "confidence"))
type_bc <- cbind(dflow,
predict(m2, dflow,
interval = "confidence"))
dfhigh <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 1)
dflow <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 0)
library(broom)
type_wc<- cbind(dfhigh,
predict(m2, dfhigh,
interval = "confidence"))
tidy(m1) %>% mutate_if(is.numeric, funs(round(., digits = 3))) %>% kable()
dfhigh <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 1)
dflow <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 0)
library(broom)
type_wc<- cbind(dfhigh,
predict(m2, dfhigh,
interval = "confidence"))
tidy(m2) %>% mutate_if(is.numeric, funs(round(., digits = 3))) %>% kable()
dfhigh <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 1)
dflow <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 0)
library(broom)
type_wc<- cbind(dfhigh,
predict(m2, dfhigh,
interval = "confidence"))
type_bc <- cbind(dflow,
predict(m2, dflow,
interval = "confidence"))
m2<-lm(income~as.vector(prestige_center) + type_dummy + prestige_center*type_dummy, data = prestige_data)
summary(m2)
type_wc<- cbind(dfhigh,
predict(m2, dfhigh,
interval = "confidence"))
dfhigh <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 1)
dflow <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 0)
type_wc<- cbind(dfhigh,
predict(m2, dfhigh,
interval = "confidence"))
m2<-lm(income~prestige_center + type_dummy + prestige_center*type_dummy, data = prestige_data)
summary(m2)
dfhigh <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 1)
dflow <- data.frame(
prestige_center = seq(min(prestige_data$prestige_center), max(prestige_data$prestige_center), .1),
type_dummy = 0)
library(broom)
type_wc<- cbind(dfhigh,
predict(m2, dfhigh,
interval = "confidence"))
type_bc <- cbind(dflow,
predict(m2, dflow,
interval = "confidence"))
prestige_data<-data.frame(prestige_data)
type_wc<- cbind(dfhigh,
predict(m2, dfhigh,
interval = "confidence"))
library(effects)
install.packages('effects')
library(plyr)
library(reshape)
library(lme4)
library(ez)
library(lattice)
library(Rmisc)
library(ggplot2)
library(ggthemr)
library(Cairo)
library(tidyverse)
library(dplyr)
library(R.utils)
library(binhf)
#set working directory
baseDir<-"~/Dropbox/PredictionNavigation/Data_pilot2/"
setwd(baseDir)
#get a list of subject folders
setwd(paste0(baseDir,'/subs'))
subs<-list.files()
#loop through and read in data
for (s in subs[19:24]){
print(s)
setwd(paste0(baseDir,'/subs/',s))
Pred_Files<-list.files(pattern=c("Prediction"))
#add back in for int data
#Int_Files<-list.files(pattern=c("Integration"))
if(s==subs[19]){
pred_data<-read.csv(Pred_Files)
#add back in for int data
#int_data<-read.csv(Int_Files)
}
else{
temp<-read.csv(Pred_Files)
pred_data<-rbind(pred_data, temp)
#temp<-read.csv(Int_Files)
#int_data<-rbind(int_data, temp)
#for (t in Test_Files){
#  temp<-read.csv(t, header=TRUE, sep=",", fill=TRUE)
#  test_data<-rbind(test_data, temp)
#}
#for (t in Nav_Files){
#  temp<-read.csv(t, header=TRUE, sep=",", fill=TRUE)
#  test_data<-rbind(nav_data, temp)
#}
}
}
#remove sub 3:
pred_data<-subset(pred_data, participant != 3)
#rename columns
colnames(pred_data)[30:32]<- c("resp","acc","rt")
#overall acc
acc<-cast(pred_data, participant~., mean, value="acc", na.rm=T)
print(acc)
colnames(acc)[colnames(acc)=="(all)"] <- "mean_acc"
mean(acc$mean_acc)
sd(acc$mean_acc)
mean(acc_map$A)
#acc by map
acc_map<-cast(pred_data, participant~map, mean, value="acc", na.rm=T)
acc_map$V1<-NULL
acc_map$participant<-as.factor(acc_map$participant)
print(acc_map)
colMeans(acc_map)
mean(acc_map$A)
mean(acc_map$A)
sd(acc_map$A)
mean(acc_map$B)
sd(acc_map$B)
#acc by path
acc_path<-cast(pred_data, participant~path, mean, value="acc", na.rm=T)
print(acc_path)
colMeans(acc_path, na.rm = T)
sd(acc_path$blue)
sd(acc_path$green)
#add a time bin
pred_data$time_bin<-ifelse(pred_data$dur < 6.0, "5", ifelse(pred_data$dur < 7.0, "6", ifelse(pred_data$dur < 8.0, "7", "8")))
unique(pred_data$time_bin)
acc_pred_time<-cast(pred_data, participant~time_bin, mean, value="acc", na.rm=T)
print(acc_pred_time)
colMeans(acc_pred_time, na.rm = T)
#######get the distance between the predicted room and the correct answer
order_only<-subset(pred_data, !is.na(subject))
order_only$scene<-as.character(order_only$scene)
order_only<-subset(order_only, (scene != "18.png") & (scene != "19.png"))
pred_data$path<-as.character(pred_data$path)
pred_data$map<-as.character(pred_data$map)
pred_data$scene<-as.character(pred_data$scene)
pred_data$scene_a<-as.character(pred_data$scene_a)
pred_data$scene_b<-as.character(pred_data$scene_b)
pred_data$cor_distance<-NA
for (row in 1:nrow(pred_data)){
if (pred_data$scene_a[row] != ""){
pth<-pred_data$path[row]
mp<-pred_data$map[row]
p<-pred_data$participant[row]
temp<-subset(order_only, subject == p & path == pth & map == mp)
if (pred_data$cor_resp[row] == "j"){
left<-pred_data$scene_a[row]
pred<-pred_data$scene[row]
ind_1<-which(temp$scene == pred)
ind_2<-which(temp$scene == left)
pred_data$cor_distance[row]<-ifelse(ind_2>ind_1, abs(ind_2-ind_1), abs(ind_2+8-ind_1))
}
else if (pred_data$cor_resp[row] == "k"){
right<-pred_data$scene_b[row]
pred<-pred_data$scene[row]
ind_1<-which(temp$scene == pred)
ind_2<-which(temp$scene == right)
pred_data$cor_distance[row]<-ifelse(ind_2>ind_1, abs(ind_2-ind_1), abs(ind_2+8-ind_1))
}
}
}
acc_future<-cast(pred_data, participant~cor_distance, mean, value="acc", na.rm=T, subset = (participant != 2))
print(acc_future)
#acc_future<-subset(acc_future, participant != "14")
colMeans(acc_future, na.rm = T)
sd(acc_future$`1`)
sd(acc_future$`2`)
sd(acc_future$`3`)
sd(acc_future$`4`)
acc_future_time<-cast(pred_data, time_bin~cor_distance, mean, value="acc", na.rm=T)
print(acc_future_time)
acc_time_four<-cast(pred_data, time_bin~participant, mean, value="acc", na.rm=T, subset = (cor_distance == 4))
acc_time_four
acc_time_four<-cast(pred_data, participant~time_bin, mean, value="acc", na.rm=T, subset = (cor_distance == 4))
acc_time_four
mean(acc_time_four$`5`, na.rm=T)
mean(acc_time_four$`8`, na.rm=T)
sd(acc_time_four$`5`, na.rm=T)
sd(acc_time_four$`8`, na.rm=T)
acc_pred_time<-cast(pred_data, participant~time_bin, mean, value="acc", na.rm=T)
print(acc_pred_time)
colMeans(acc_pred_time, na.rm = T)
sd(acc_pred_time$`5`)
sd(acc_pred_time$`6`)
sd(acc_pred_time$`7`)
sd(acc_pred_time$`8`)
#get a list of subject folders
setwd(paste0(baseDir,'/subs'))
subs<-list.files()
#loop through and read in data
for (s in subs[19:24]){
print(s)
setwd(paste0(baseDir,'/subs/',s))
Int_Files<-list.files(pattern=c("Integration"))
if(s==subs[19]){
int_data<-read.csv(Int_Files)
}
if(s==subs[22]){
#skip this part because no data file
next
}
else{
temp<-read.csv(Int_Files)
int_data<-rbind(int_data, temp)
}
}
colnames(int_data)[23:25]<- c("resp","acc","rt")
#overall acc
acc_int<-cast(int_data, participant~., mean, value="acc", na.rm=T)
colnames(acc_int)[colnames(acc_int)=="(all)"] <- "mean_acc"
print(acc_int)
mean(acc_int$mean_acc)
sd(acc_int$mean_acc)
#acc by int and no int
acc_int_noint<-cast(int_data, participant ~ cond, mean, value = "acc", na.rm=T)
print(acc_int_noint)
colMeans(acc_int_noint)
sd(acc_int_noint$No_Int)
sd(acc_int_noint$Int)
#for the bars
int_run<-cast(int_data, Int_All_Runs.thisN~., mean, value="acc", na.rm=T, subset = (!is.na(Int_All_Runs.thisN)))
#acc by run
acc_run_int<-cast(int_data, participant ~ Int_All_Runs.thisN, mean, value  = "acc", na.rm=T)
print(acc_run_int)
colMeans(acc_run_int, na.rm=T)
sd(acc_run_int$`0`)
sd(acc_run_int$`3`)
sd(acc_run_int$`3`, na.rm=T)
#acc by int and no int
acc_int_noint_run<-cast(int_data, participant ~ cond + Int_All_Runs.thisN, mean, value = "acc", na.rm=T, subset = (cond != "V1"))
print(acc_int_noint_run)
colMeans(acc_int_noint_run, na.rm=T)
(66.25 + 75)/2
(82.5 + 75)/2
(82.5 + 84.375)/2
(80 + 87.5)/2
