plot_distance
acc_future<-cast(pred_data, participant~cor_distance, mean, value="acc", na.rm=T, subset = (participant != 2))
print(acc_future)
#acc_future<-subset(acc_future, participant != "14")
colMeans(acc_future, na.rm = T)
sd(acc_future$`4`)
#plot it
#do this for inverse efficiency
acc_distance_plot<-cast(pred_data, participant + cor_distance~., mean, value="acc", na.rm=T, subsest = (!is.na(cor_distance)))
colnames(acc_distance_plot)[colnames(acc_distance_plot)=="(all)"] <- "mean_acc"
acc_distance_plot<-subset(acc_distance_plot, !is.na(cor_distance))
print(acc_distance_plot)
acc_distance_plot$participant<-as.factor(acc_distance_plot$participant)
acc_distance_plot$cor_distance<-as.factor(acc_distance_plot$cor_distance)
acc_distance_plot_rt<-cast(pred_data, participant + cor_distance~., mean, value="rt", na.rm=T, subsest = (!is.na(cor_distance)))
colnames(acc_distance_plot_rt)[colnames(acc_distance_plot_rt)=="(all)"] <- "mean_rt"
acc_distance_plot_rt<-subset(acc_distance_plot_rt, !is.na(cor_distance))
acc_distance_plot$inverse_efficiency<-acc_distance_plot_rt$mean_rt/acc_distance_plot$mean_acc
#for the bars
acc_distance_plot_rt<-as.data.frame(acc_distance_plot_rt)
distance_mean<-cast(acc_distance_plot, cor_distance~., mean, value="inverse_efficiency", na.rm=T)
distance_mean<-subset(distance_mean, !is.na(cor_distance))
colnames(distance_mean)[colnames(distance_mean)=="(all)"] <- "inverse_efficiency"
print(distance_mean)
distance_mean$cor_distance<-as.factor(distance_mean$cor_distance)
distance_mean$inverse_efficiency<-as.numeric(distance_mean$inverse_efficiency)
distance_mean<-as.data.frame(distance_mean)
plot_distance_inv<-ggplot()+
geom_bar(data = distance_mean, aes(y=inverse_efficiency, x = cor_distance), fill = "white", color = "black", stat = "identity", width = 0.5)+
geom_point(data = acc_distance_plot, aes(y=inverse_efficiency, x=cor_distance, color= factor(participant)),
position = position_jitter(w=0.2, h= 0)) +
theme_grey(base_size = 22)
plot_distance_inv
acc_future_time<-cast(pred_data, time_bin~cor_distance, mean, value="acc", na.rm=T)
print(acc_future_time)
colMeans(acc_future_time, na.rm=T)
acc_time_four<-cast(pred_data, participant~time_bin, mean, value="acc", na.rm=T, subset = (cor_distance == 4))
acc_time_four
sd(acc_time_four$`5`, na.rm=T)
sd(acc_time_four$`8`, na.rm=T)
#plot time X distance
#CHANGE ACK TO ACC!!!!!!!
distance_time<-cast(pred_data, time_bin + cor_distance ~ . , mean, value="acc", na.rm=T)
print(distance_time)
distance_time<-subset(distance_time, !is.na(cor_distance))
colnames(distance_time)[colnames(distance_time)=="(all)"] <- "mean_acc"
print(distance_time)
distance_time$time_bin<-as.numeric(distance_time$time_bin)
distance_time$cor_distance<-as.factor(distance_time$cor_distance)
plot_distance_time <- ggplot(data=distance_time, aes(y=mean_acc,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1)) +
theme_grey(base_size = 22) +
labs(colour = "Steps into Future") +
theme(axis.line = element_blank()) +
xlab('Amount of Prediction Time (s)') +
ylab('Accuracy (%)')
plot_distance_time
#plot time X distance reaction time
distance_time_rt<-cast(pred_data, time_bin + cor_distance ~ . , mean, value="rt", na.rm=T)
print(distance_time_rt)
distance_time_rt<-subset(distance_time_rt, !is.na(cor_distance))
colnames(distance_time_rt)[colnames(distance_time_rt)=="(all)"] <- "mean_rt"
print(distance_time_rt)
distance_time_rt$time_bin<-as.numeric(distance_time_rt$time_bin)
distance_time_rt$cor_distance<-as.factor(distance_time_rt$cor_distance)
#for the bars
time_mean<-cast(pred_data, time_bin~., mean, value="acc", na.rm=T, subset = (map == "A" | map == "B"))
time_mean<-subset(time_mean, !is.na(time_bin))
colnames(time_mean)[colnames(time_mean)=="(all)"] <- "mean_acc"
print(time_mean)
time_mean$time_bin<-as.factor(time_mean$time_bin)
plot_distance_time_rt <- ggplot(data=distance_time_rt, aes(y=mean_rt,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(1,2.5)) +
theme_grey(base_size = 22)
plot_distance_time_rt
#it's using the average from participant 1...
#plot it
distance_time_plot<-cast(pred_data, participant + cor_distance~., mean, value="acc", na.rm=T, subsest = (!is.na(cor_distance)))
colnames(acc_distance_plot)[colnames(acc_distance_plot)=="(all)"] <- "mean_acc"
acc_distance_plot<-subset(acc_distance_plot, !is.na(cor_distance))
print(acc_distance_plot)
acc_distance_plot$participant<-as.factor(acc_distance_plot$participant)
acc_distance_plot$cor_distance<-as.factor(acc_distance_plot$cor_distance)
rt_future<-cast(pred_data, participant~cor_distance, mean, value="rt", na.rm=T)
print(rt_future)
colMeans(rt_future, na.rm=T)
rt_future_time<-cast(pred_data, time_bin~cor_distance, mean, value="rt", na.rm=T)
print(rt_future_time)
#make a column for inverse efficiency
pred_data$inverse_efficiency<-pred_data$acc/pred_data$rt
head(pred_data$inverse_efficiency)
inv_eff_cor_dist<-cast(pred_data, participant~cor_distance, mean, value="inverse_efficiency", na.rm = T)
inv_eff_cor_dist
colMeans(inv_eff_cor_dist)
inv_eff_pred_time<-cast(pred_data, participant~time_bin, mean, value="inverse_efficiency", na.rm = T)
inv_eff_pred_time
colMeans(inv_eff_pred_time)
########################################
############ TEMP INTEGRATION ##########
########################################
#get a list of subject folders
setwd(paste0(baseDir,'/subs'))
subs<-list.files()
print(subs)
#loop through and read in data
for (s in subs){
print(s)
setwd(paste0(baseDir,'/subs/',s))
Int_Files<-list.files(pattern=c("Integration"))
if(s==subs[1]){
int_data<-read.csv(Int_Files)
}
else{
temp<-read.csv(Int_Files)
int_data<-rbind(int_data, temp)
}
}
colnames(int_data)[23:25]<- c("resp","acc","rt")
#overall acc
acc_int<-cast(int_data, participant~., mean, value="acc", na.rm=T)
colnames(acc_int)[colnames(acc_int)=="(all)"] <- "mean_acc"
print(acc_int)
mean(acc_int$mean_acc)
sd(acc_int$mean_acc)
t.test(acc_int$mean_acc, mu = 0.5)
acc_int$participant<-as.factor(acc_int$participant)
acc_int_plot <- ggplot() +
geom_point(data=acc_int, aes(y=mean_acc, x=participant, size = 2), show.legend = FALSE) +
ylim(c(0.4,1)) + ylab("Accuracy (%)") + xlab("Participant") +
theme_grey(base_size = 22)
acc_int_plot
#acc by map and block
acc_path_int<-cast(int_data, participant~path, mean, value="acc", na.rm=T)
print(acc_path_int)
colMeans(acc_path_int)
#plot
int_path_plot<-cast(int_data, participant + path~., mean, value="acc", na.rm=T, subset = (path == "green" | path == "blue"))
colnames(int_path_plot)[colnames(int_path_plot)=="(all)"] <- "mean_acc"
print(int_path_plot)
int_path_plot$participant<-as.factor(int_path_plot$participant)
#for the bars
int_path<-cast(int_data, path~., mean, value="acc", na.rm=T, subset = (path == "green" | path == "blue"))
colnames(int_path)[colnames(int_path)=="(all)"] <- "mean_acc"
print(int_path)
#where are there only 4 participants here?
plot_path_int <- ggplot() +
geom_bar(data=int_path, aes(y=mean_acc,x=path),fill  = "white", color = "black", stat = "identity", width = 0.5) +
geom_point(data=int_path_plot, aes(y=mean_acc, x=path, color = factor(participant))) +
ylim(c(0,1.0)) +
theme_grey(base_size = 22)
plot_path_int
#acc by run
acc_run_int<-cast(int_data, participant ~ Int_All_Runs.thisN, mean, value  = "acc", na.rm=T)
print(acc_run_int)
colMeans(acc_run_int, na.rm=T)
#inverse efficiency by run
int_data$inverse_efficiency<-int_data$acc/int_data$rt
acc_run_int_eff<-cast(int_data, participant ~ Int_All_Runs.thisN, mean, value  = "inverse_efficiency", na.rm=T)
print(acc_run_int_eff)
colMeans(acc_run_int_eff, na.rm=T)
#plot
int_run_plot<-cast(int_data, participant + Int_All_Runs.thisN~., mean, value="acc", na.rm=T, subset = (!is.na(Int_All_Runs.thisN)))
colnames(int_run_plot)[colnames(int_run_plot)=="(all)"] <- "mean_acc"
print(int_run_plot)
int_run_plot$participant<-as.factor(int_run_plot$participant)
#for the bars
int_run<-cast(int_data, Int_All_Runs.thisN~., mean, value="acc", na.rm=T, subset = (!is.na(Int_All_Runs.thisN)))
colnames(int_run)[colnames(int_run)=="(all)"] <- "mean_acc"
print(int_run)
#where are there only 4 participants here? why are there only 2 bars?
plot_run_int <- ggplot() +
geom_line(data=int_run_plot, aes(y=mean_acc,x=Int_All_Runs.thisN, col = participant), size = 1.3) +
ylim(c(0.3,1.0)) +
theme_grey(base_size = 22) +
theme(legend.position = "none")+
xlab('Run') +
ylab('Accuracy (%)')
plot_run_int
#acc by run and path
acc_run_path<-cast(int_data, participant ~ Int_All_Runs.thisN + path, mean, value  = "acc", na.rm=T)
print(acc_run_path)
#acc by int and no int
acc_int_noint<-cast(int_data, participant ~ cond, mean, value = "acc", na.rm=T)
print(acc_int_noint)
colMeans(acc_int_noint)
sd(acc_int_noint$Int)
#inv eff by int and no int
acc_int_noint_eff<-cast(int_data, participant ~ cond, mean, value = "inverse_efficiency", na.rm=T)
print(acc_int_noint_eff)
colMeans(acc_int_noint_eff)
sd(acc_int_noint_eff$Int)
#plot
int_noInt_plot<-cast(int_data, participant + cond ~., mean, value="acc", na.rm=T, subset= (cond != ""))
colnames(int_noInt_plot)[colnames(int_noInt_plot)=="(all)"] <- "mean_acc"
print(int_noInt_plot)
int_noInt_plot$participant<-as.factor(int_noInt_plot$participant)
#for the bars
int_noInt<-cast(int_data, cond~., mean, value="acc", na.rm=T, subset = (cond != ""))
colnames(int_noInt)[colnames(int_noInt)=="(all)"] <- "mean_acc"
print(int_noInt)
#where are there only 4 participants here? why are there only 2 bars?
plot_int_noInt <- ggplot() +
geom_bar(data=int_noInt, aes(y=mean_acc,x=cond),fill  = "white", color = "black", stat = "identity", width = 0.5) +
geom_point(data=int_noInt_plot, aes(y=mean_acc, x=cond, color = factor(participant)), position = position_jitter(w = 0.2, h = 0)) +
ylim(c(0,1.0)) +
theme_grey(base_size = 22) +
theme(legend.position = 'none')+
xlab('Integration Condition')+
ylab('Accuracy (%)')
plot_int_noInt
#acc by int and no int
acc_int_noint_run<-cast(int_data, participant ~ cond + Int_All_Runs.thisN, mean, value = "acc", na.rm=T, subset = (cond != "V1"))
print(acc_int_noint_run)
colMeans(acc_int_noint_run, na.rm=T)
#plot
int_noInt_run_plot<-cast(int_data, Int_All_Runs.thisN + cond ~ ., mean, value="acc", na.rm=T, subset= (cond != ""))
colnames(int_noInt_run_plot)[colnames(int_noInt_run_plot)=="(all)"] <- "mean_acc"
print(int_noInt_run_plot)
int_noInt_run_plot$Int_All_Runs.thisN<-as.numeric(int_noInt_run_plot$Int_All_Runs.thisN)
#int_noInt_run_plot$participant<-as.factor(int_noInt_run_plot$participant)
#where are there only 4 participants here? why are there only 2 bars?
plot_int_noInt_run <- ggplot(data=int_noInt_run_plot, aes(x=Int_All_Runs.thisN, y=mean_acc, colour = cond)) +
geom_line(size = 1.5, se=FALSE) +
ylim(c(0.3,1.0)) +
theme_grey(base_size = 22)+
labs(colour = "Integration Condition") +
xlab("Run")+
ylab("Accuracy (%)")
plot_int_noInt_run
######do the same for reaction time
#overall acc
acc_int_rt<-cast(int_data, participant~., mean, value="rt", na.rm=T)
print(acc_int_rt)
plot(acc_int_rt, ylab = "rt", pch = 19, col = "blue")
plot(rt, col = "blue", ylab="rt", pch = 19)
acc_cond_rt<-cast(int_data, participant~cond, mean, value="rt", na.rm=T)
print(acc_cond_rt)
colMeans(acc_cond_rt)
#acc by map and block
acc_path_int_rt<-cast(int_data, participant~path, mean, value="rt", na.rm=T)
print(acc_path_int_rt)
#acc by run
acc_run_int_rt<-cast(int_data, participant ~ Int_All_Runs.thisN, mean, value  = "rt", na.rm=T)
print(acc_run_int_rt)
#acc by run and path
acc_run_path_rt<-cast(int_data, participant ~ Int_All_Runs.thisN + path, mean, value  = "rt", na.rm=T)
print(acc_run_path_rt)
#rt by int and no int
rt_int_noint_run<-cast(int_data, participant ~ cond + Int_All_Runs.thisN, mean, value = "rt", na.rm=T, subset = (cond != "V1"))
print(rt_int_noint_run)
colMeans(rt_int_noint_run, na.rm=T)
#plot
int_noInt_run_plot_rt<-cast(int_data, Int_All_Runs.thisN + cond ~ ., mean, value="rt", na.rm=T, subset= (cond != ""))
colnames(int_noInt_run_plot_rt)[colnames(int_noInt_run_plot_rt)=="(all)"] <- "mean_rt"
print(int_noInt_run_plot_rt)
int_noInt_run_plot_rt$Int_All_Runs.thisN<-as.numeric(int_noInt_run_plot_rt$Int_All_Runs.thisN)
#int_noInt_run_plot$participant<-as.factor(int_noInt_run_plot$participant)
#where are there only 4 participants here? why are there only 2 bars?
plot_int_noInt_rt <- ggplot(data=int_noInt_run_plot_rt, aes(x=Int_All_Runs.thisN, y=mean_rt, colour = cond)) +
geom_line(size = 1.5, se=FALSE) +
ylim(c(1.5,2.0)) +
theme_grey(base_size = 22)
plot_int_noInt_rt
#read in int_info per sub
#create an empty data frame for the full path
int_paths<-data.frame()
#create an empty data frame for just the int bridges, this will eventually get merged with int_full
int_info_data<-data.frame(Q = NA, A = NA, A_next = NA, path = NA, participant = NA)
#loop through subjects to fill in int_paths and int_info_data
for (sub in unique(order_only$subject)){
temp<-subset(order_only, subject == sub)
#this gets the room numbers and paths of the "int bridges" for each participant
int_info<-read.csv(paste0("~/Dropbox/PredictionNavigation/randScheme/", sub, "_IntInfo.csv"), header = TRUE)
int_info$participant<-sub
int_info_data<-rbind(int_info_data, int_info)
#gets the path order for each of teh 4 original sequence for each participant
g_a<-(temp$scene[1:8])
bl_a<-(temp$scene[9:16])
g_b<-(temp$scene[17:24])
bl_b<-(temp$scene[25:32])
#shifts the paths and binds them together for the green and blue path, based on which one gets integrated in each participant
if (int_info$path[1] == "green"){
int<-c(shift(g_a, places = abs(match(int_info$Q[1], g_a)-8), dir = "right"), shift(g_b, places = abs(match(int_info$A[1], g_b)-1), dir = "left"))
int<-cbind(matrix(int), sub)
int<-cbind(int, "green")
}
if (int_info$path[1] == "blue") {
int<-c(shift(bl_a, places = abs(match(int_info$Q[1], bl_a)-8), dir = "right"), shift(bl_b, places = abs(match(int_info$A[1], bl_b)-1), dir = "left"))
int<-cbind(matrix(int), sub)
int<-cbind(int, "blue")
}
int_paths<-rbind(int_paths, int)
}
int_info_data<-int_info_data %>% filter(!is.na(participant))
order_only<-subset(pred_data, !is.na(subject))
order_only$scene<-as.character(order_only$scene)
#GET COR DISTANCE FOR EACH SUB FOR INT
#this is including no int cond...but will have to add a diff loop for that
int_paths$V1<-as.character(int_paths$V1)
int_data$cor_distance<-NA
for (row in 1:nrow(int_data)){
if (int_data$scene_a[row] != ""){
cond<-int_data$cond[row]
p<-int_data$participant[row]
temp<-subset(int_paths, sub == p)
temp_path<-as.character(temp$V1)
if (int_data$cor_resp[row] == "j"){
left<-int_data$scene_a[row]
pred<-int_data$scene[row]
ind_1<-as.numeric(which(temp_path == pred))
ind_2<-as.numeric(which(temp_path == left))
int_data$cor_distance[row]<-ifelse(ind_2>ind_1, ind_2-ind_1, (ind_2+16)-ind_1)
}
else if (int_data$cor_resp[row] == "k"){
right<-int_data$scene_b[row]
pred<-int_data$scene[row]
ind_1<-as.numeric(which(temp_path == pred))
ind_2<-as.numeric(which(temp_path == right))
int_data$cor_distance[row]<-ifelse(ind_2>ind_1, ind_2-ind_1, (ind_2+16)-ind_1)
}
}
}
int_test<-subset(int_data, cond == "Int")
int_test$cor_distance
int_distance<-cast(int_test, participant~cor_distance, mean, value="acc", na.rm=T)
colMeans(int_distance)
int_distance_run<-cast(int_test, participant~cor_distance + Int_All_Runs.thisN, mean, value="acc", na.rm=T)
colMeans(int_distance_run, na.rm=T)
#plot run X distance -- using int_Test for int only until I get the for loop right for cor dist in no int cond
distance_run_int<-cast(int_test, Int_All_Runs.thisN + cor_distance ~ . , mean, value="acc", na.rm=T)
print(distance_run_int)
colnames(distance_run_int)[colnames(distance_run_int)=="(all)"] <- "mean_acc"
print(distance_run_int)
distance_run_int$Int_All_Runs.thisN<-as.numeric(distance_run_int$Int_All_Runs.thisN)
distance_run_int$cor_distance<-as.factor(distance_run_int$cor_distance)
plot_distance_run <- ggplot(data=distance_run_int, aes(y=mean_acc,x=Int_All_Runs.thisN, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1.0)) +
theme_grey(base_size = 22)
plot_distance_run
plot_distance_run_int <- ggplot(data=distance_run_int, aes(y=mean_acc,x=Int_All_Runs.thisN, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1.0)) +
theme_grey(base_size = 22)
plot_distance_run_int
#plot it--using int_test again
acc_distance_int<-cast(int_test, participant + cor_distance~., mean, value="acc", na.rm=T, subsest = (!is.na(cor_distance)))
colnames(acc_distance_int)[colnames(acc_distance_int)=="(all)"] <- "mean_acc"
acc_distance_int<-subset(acc_distance_int, !is.na(cor_distance))
print(acc_distance_int)
acc_distance_int$participant<-as.factor(acc_distance_int$participant)
acc_distance_int$cor_distance<-as.factor(acc_distance_int$cor_distance)
#for the bars
distance_mean<-cast(int_test, cor_distance~., mean, value="acc", na.rm=T)
distance_mean<-subset(distance_mean, !is.na(cor_distance))
colnames(distance_mean)[colnames(distance_mean)=="(all)"] <- "mean_acc"
print(distance_mean)
distance_mean$cor_distance<-as.factor(distance_mean$cor_distance)
plot_distance_int <- ggplot() +
geom_bar(data=distance_mean, aes(y=mean_acc,x=cor_distance),fill  = "white", color = "black", stat = "identity", width = 0.5) +
geom_point(data=acc_distance_int, aes(y=mean_acc, x=cor_distance, color = factor(participant)), position = position_jitter(w=0.2, h=0)) +
ylim(c(0,1.0)) +
theme_grey(base_size = 22)
plot_distance_int
plot_distance_int <- ggplot() +
geom_bar(data=distance_mean, aes(y=mean_acc,x=cor_distance),fill  = "white", color = "black", stat = "identity", width = 0.5) +
geom_point(data=acc_distance_int, aes(y=mean_acc, x=cor_distance, color = factor(participant)), position = position_jitter(w=0.2, h=0)) +
ylim(c(0,1.0)) +
theme_grey(base_size = 22) +
theme(legend.position = "none")
plot_distance_int <- ggplot() +
geom_bar(data=distance_mean, aes(y=mean_acc,x=cor_distance),fill  = "white", color = "black", stat = "identity", width = 0.5) +
geom_point(data=acc_distance_int, aes(y=mean_acc, x=cor_distance, color = factor(participant)), position = position_jitter(w=0.2, h=0)) +
ylim(c(0,1.0)) +
theme_grey(base_size = 22) +
theme(legend.position = "none")+
ylab("Accuracy (%)") +
xlab("Number of Steps into Future")
plot_distance_int
plot_distance_run_int <- ggplot(data=distance_run_int, aes(y=mean_acc,x=Int_All_Runs.thisN, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1.0)) +
theme_grey(base_size = 22)
plot_distance_run_int
plot_distance_run_int <- ggplot(data=distance_run_int, aes(y=mean_acc,x=Int_All_Runs.thisN, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1.0)) +
theme_grey(base_size = 22) +
xlab("Run")+
ylab ("Accuracy (%)")+
labs(colour = "Steps into Future")
plot_distance_run_int
#where are there only 4 participants here?
plot_int <- ggplot() +
geom_bar(data=int_req, aes(y=mean_acc,x=int_required),fill  = "white", color = "black", stat = "identity", width = 0.5) +
#geom_errorbar(data=my_dat, aes(y=my_mean,x=cyl,ymin=my_mean-my_se,ymax=my_mean+my_se), width = 0.75) +
geom_point(data=int_req_plot, aes(y=mean_acc, x=int_required, color = factor(participant)), position = position_jitter(w = 0.2, h = 0)) +
ylim(c(0,1.0)) +
theme_grey(base_size = 22)
plot_int
plot_distance_time <- ggplot(data=distance_time, aes(y=mean_acc,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1)) +
theme_grey(base_size = 22) +
labs(colour = "Steps into Future") +
theme(legend.key.size = unit(3,"line")) +
xlab('Amount of Prediction Time (s)') +
ylab('Accuracy (%)')
plot_distance_time
plot_distance_time <- ggplot(data=distance_time, aes(y=mean_acc,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1)) +
theme_grey(base_size = 22) +
labs(colour = "Steps into Future") +
theme(legend.key.size = unit(2,"line")) +
xlab('Amount of Prediction Time (s)') +
ylab('Accuracy (%)')
plot_distance_time
plot_distance_time <- ggplot(data=distance_time, aes(y=mean_acc,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1)) +
theme_grey(base_size = 22) +
labs(colour = "Steps into Future") +
theme(legend.key.size = unit(2,"line")) +
xlab('Amount of Prediction Time (s)') +
ylab('Accuracy (%)')
plot_distance_time <- ggplot(data=distance_time, aes(y=mean_acc,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1)) +
theme_grey(base_size = 22) +
labs(colour = "Steps into Future") +
theme(legend.key.size = unit(2,"line"), legend.text=element_text(size=16)) +
xlab('Amount of Prediction Time (s)') +
ylab('Accuracy (%)')
plot_distance_time
plot_distance_time <- ggplot(data=distance_time, aes(y=mean_acc,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1)) +
theme_grey(base_size = 22) +
labs(colour = "Steps into Future") +
theme(legend.key.size = unit(2,"line"), legend.text=element_text(size=12)) +
xlab('Amount of Prediction Time (s)') +
ylab('Accuracy (%)')
plot_distance_time
plot_distance_time <- ggplot(data=distance_time, aes(y=mean_acc,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1)) +
theme_grey(base_size = 22) +
labs(colour = "Steps into Future") +
theme(legend.key.size = unit(2,"line"), legend.text=element_text(size=2)) +
xlab('Amount of Prediction Time (s)') +
ylab('Accuracy (%)')
plot_distance_time
plot_distance_time <- ggplot(data=distance_time, aes(y=mean_acc,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1)) +
theme_grey(base_size = 22) +
labs(colour = "Steps into Future") +
theme(legend.key.size = unit(2,"line"), legend.title=element_text(size=12)) +
xlab('Amount of Prediction Time (s)') +
ylab('Accuracy (%)')
plot_distance_time
plot_distance_time <- ggplot(data=distance_time, aes(y=mean_acc,x=time_bin, colour = cor_distance)) +
geom_line(size = 1.5, se= FALSE)+
ylim(c(0.5,1)) +
theme_grey(base_size = 22) +
labs(colour = "Steps into Future") +
theme(legend.text = element_text(size = 14), legend.title=element_text(size=14)) +
xlab('Amount of Prediction Time (s)') +
ylab('Accuracy (%)')
plot_distance_time
#remake integration data to prepare for shiny
int_data$Run_1<-ifelse(int_data$Int_All_Runs.thisN == 0, True, False)
#remake integration data to prepare for shiny
int_data$Run_1<-ifelse(int_data$Int_All_Runs.thisN == 0, TRUE, FALSE)
int_data$Run_2<-ifelse(int_data$Int_All_Runs.thisN == 1, TRUE, FALSE)
int_data$Run_3<-ifelse(int_data$Int_All_Runs.thisN == 2, TRUE, FALSE)
int_data$Run_4<-ifelse(int_data$Int_All_Runs.thisN == 3, TRUE, FALSE)
View(int_data)
View(int_noInt_plot)
shiny_prep<-cast(int_data, participant + Int_All_Runs.thisN + cond, mean, value = "acc", na.rm=T)
shiny_prep<-cast(int_data, participant + Int_All_Runs.thisN + cond, mean, value = "acc", na.rm=T)
shiny_prep<-cast(int_data, participant + Int_All_Runs.thisN + cond~., mean, value = "acc", na.rm=T)
shiny_prep
shiny_prep<-subset(cond != "")
shiny_prep<-subset(cond, != "")
shiny_prep<-subset(shiny_prep, cond != "")
shiny_prep
colnames(shiny_prep)[colnames(shiny_prep)=="(all)"] <- "mean_acc"
shiny_prep$Run_1<-ifelse(int_data$Int_All_Runs.thisN == 0, TRUE, FALSE)
shiny_prep$Run_2<-ifelse(int_data$Int_All_Runs.thisN == 1, TRUE, FALSE)
shiny_prep$Run_3<-ifelse(int_data$Int_All_Runs.thisN == 2, TRUE, FALSE)
shiny_prep$Run_4<-ifelse(int_data$Int_All_Runs.thisN == 3, TRUE, FALSE)
shiny_prep<-cast(int_data, participant + Int_All_Runs.thisN + cond~., mean, value = "acc", na.rm=T)
shiny_prep<-subset(shiny_prep, cond != "")
colnames(shiny_prep)[colnames(shiny_prep)=="(all)"] <- "mean_acc"
shiny_prep$Run_1<-ifelse(shiny_prep$Int_All_Runs.thisN == 0, TRUE, FALSE)
shiny_prep$Run_2<-ifelse(shiny_prep$Int_All_Runs.thisN == 1, TRUE, FALSE)
shiny_prep$Run_3<-ifelse(shiny_prep$Int_All_Runs.thisN == 2, TRUE, FALSE)
shiny_prep$Run_4<-ifelse(shiny_prep$Int_All_Runs.thisN == 3, TRUE, FALSE)
shiny_prep
shiny_bar_prep<-cast(int_data, cond~., mean, value = "acc", na.rm=T)
colnames(shiny_bar_prep)[colnames(shiny_bar_prep)=="(all)"] <- "mean_acc"
shiny
shiny_bar_prep
shiny_prep<-cast(int_data, participant + Int_All_Runs.thisN + cond~., mean, value = "acc", na.rm=T, subset = (cond != ""))
shiny_prep
shiny_bar_prep<-cast(int_data, cond~., mean, value = "acc", na.rm=T, subset = (cond != ""))
colnames(shiny_bar_prep)[colnames(shiny_bar_prep)=="(all)"] <- "mean_acc"
shiny_bar_prep
